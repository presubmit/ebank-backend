syntax = "proto3";

package ledger;

import "services/proto/googleapi/annotations.proto";
  
option go_package = "services/ledger";

message Empty{};

message Transaction {
  string id = 1;
  string leg_id = 2;
  int64 amount = 3;
  string currency = 4;
  string description = 5;
  string account_id = 6;
  string counterparty_id = 7;
  string other_account_id = 8;
  int64 after_balance = 9;
  string created_by = 10;
  string created_at = 11;
  string type = 12;
}

message Transactions {
  repeated Transaction transactions = 1;
}

message GetTransactionsRequest {
  int32 limit = 1;
}

message PaymentRequest {
  repeated Transfer transfers = 1;
}

message PaymentResponse {
  repeated Transaction transactions = 1;
}

message Transfer {
  int64 amount = 1;
  string currency = 2;
  string counterparty_id = 3;
  string from_account = 4;
  string to_account = 5;
  string description = 6;
}

message TopUpRequest {
  int64 amount = 1;
  string currency = 2;
  string account_id = 3;
}

message GetAccountsRequest {}

message CreateAccountRequest {
  string name = 1;
  string currency = 2;
}

message Account {
  string id = 1;
  string name = 2;
  int64 balance = 3;
  string currency = 4;
}

message Accounts { 
  repeated Account accounts = 1;
}

message Counterparty {
  string id = 1;
  string type = 2;
  string country = 3;
  string currency = 4; 
  string iban = 5;
  string first_name = 6;
  string last_name = 7;
  string company_name = 8;
  string created_by = 9;
}

message Counterparties {
  repeated Counterparty counterparties = 1;
}

message CounterpartyFields {
  repeated string fields = 1;
}

service LedgerService {
  // Accounts
  rpc CreateAccount(CreateAccountRequest) returns (Account) {
    option (google.api.http) = {
      post: "/accounts",
      body: "*"
    };
  }
  rpc GetAccounts(GetAccountsRequest) returns (Accounts) {
    option (google.api.http) = {
      get: "/accounts",
    };
  }
  rpc GetAccount(Account) returns (Account) {
    option (google.api.http) = {
      get: "/accounts/{id}",
    };
  }

  // Topup
  rpc TopUp(TopUpRequest) returns (Transaction) {
    option (google.api.http) = {
      post: "/topup",
      body: "*",
    };
  }
  
  // Payments
  rpc MakePayment(PaymentRequest) returns (PaymentResponse) {
    option (google.api.http) = {
      post: "/payment",
      body: "*",
    };
  }

  // Transactions
  rpc GetTransactions(GetTransactionsRequest) returns (Transactions) {
    option (google.api.http) = {
      get: "/transactions",
    };
  }

  // Counterparties
  rpc CreateCounterparty(Counterparty) returns (Counterparty) {
    option (google.api.http) = {
      post: "/counterparties",
      body: "*",
    };
  }
  rpc GetCounterparties(Empty) returns (Counterparties) {
    option (google.api.http) = {
      get: "/counterparties",
    };
  }
  rpc GetCounterparty(Counterparty) returns (Counterparty) {
    option (google.api.http) = {
      get: "/counterparties/{id}",
    };
  }
  rpc GetCounterpartyFields(Counterparty) returns (CounterpartyFields) {
    option (google.api.http) = {
      get: "/counterparty-fields",
    };
  }
}